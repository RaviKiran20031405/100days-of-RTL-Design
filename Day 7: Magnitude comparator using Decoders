module decoder2x4(a,b,en,d0,d1,d2,d3);
input a,b,en;
output d0,d1,d2,d3;
assign d0=~a & ~b & en;
assign d1=~a & b & en;
assign d2=a & ~b & en;
assign d3=a & b & en;
endmodule

module comp(a,b,en,greater,equal,less);
input [1:0]a,b;
input en;
output greater,less,equal;
wire w0,w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11;

decoder2x4 dec1(a[1],b[1],en,w0,w1,w2,w3);
decoder2x4 dec2(a[0],b[0],w0,w4,w5,w6,w7);
decoder2x4 dec3(a[0],b[0],w3,w8,w9,w10,w11);

or or1(greater,w9,w1,w5);
or or2(equal,w4,w7,w8,w11);
or or3(less,w10,w2,w6);

endmodule


///////////////////////////////////////////    Testbench    ///////////////////////////////////////////

module comp_tb();
reg [1:0]a,b;
reg en;
wire greter,less,equal;
comp dut(a,b,en,greater,equal,less);
integer i;
task initialize;
{a,b,en}=0;
endtask

task stimulus;
begin
for(i=0;i<=16;i=i+1)
begin
#10{a,b}=i;
end
end
endtask

initial 
begin
initialize;
en=1;
stimulus;
$finish;
end

initial
$monitor($time,"en=%b,a=%b,b=%b,greater=%b,equal=%b,less=%b",en,a,b,greater,equal,less);
endmodule
