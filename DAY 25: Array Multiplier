module one_bit_FA(
    input a,b,
    input cin,
    output cout,sum);
    assign sum  = a^b^cin;
    assign cout = (a&b)|(b&cin)|(cin&a);
endmodule

module binary_adder( 
    input [99:0] a, b,
    input cin,
	output [99:0] sum );
    wire [99:0] c_out;
    genvar i;
    one_bit_FA FA1(a[0],b[0],cin,c_out[0],sum[0]);
    generate
        for (i=1; i<100; i=i+1)
		begin : Full_adder_block
        one_bit_FA FA(a[i],b[i],c_out[i-1],c_out[i],sum[i]);
    end
    endgenerate
endmodule


/////////////////////////////////   TB   ///////////////////////////////////////////


`timescale 1ns / 1ps
  module Array_multi_tb;       
  
   reg [3:0]inp1;
   reg [3:0]inp2;       
   wire [7:0]product;  
        
   Array_multiplier uut(.inp1(inp1),.inp2(inp2),.product(product));

   initial
   begin 
     inp1=3;
     inp2=20;
     #30 ;

     inp1=13;
     inp2=16;
     #30 ;
   
     inp1=10;
     inp2=28;
     #30 ;
   
     inp1=11;
     inp2=22;
     #30 ;
   
     inp1=17;
     inp2=15;
     #30 ;
   
     $finish;
   end 
endmodule
