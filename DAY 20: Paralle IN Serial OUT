module PISO (
    input clk,             // Clock signal
    input load,            // Load control signal (active high)
    input [3:0] parallel_in, // 4-bit parallel input data
    output reg serial_out  // Serial output data
);
    reg [3:0] shift_reg; // Internal 4-bit register to hold the data

    always @(posedge clk) begin
        if (load) begin
            shift_reg <= parallel_in; // Load parallel data into the register
        end else begin
            serial_out <= shift_reg[3]; // Output the MSB as serial output
            shift_reg <= shift_reg << 1; // Shift left by 1 bit
        end
    end
endmodule


//////////////////////   TB   ////////////////////////////


module PISO_tb;
    reg clk;
    reg load;
    reg [3:0] parallel_in;
    wire serial_out;

    // Instantiate the PISO module
    PISO uut (
        .clk(clk),
        .load(load),
        .parallel_in(parallel_in),
        .serial_out(serial_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns clock period
    end

    // Test sequence
    initial begin
        // Test Case 1: Load parallel data
        load = 1;
        parallel_in = 4'b1010; // Load 1010
        #10; // Wait for one clock cycle

        // Test Case 2: Shift out the data serially
        load = 0;
        #10; // Serial out = 1 (MSB of 1010)
        #10; // Serial out = 0
        #10; // Serial out = 1
        #10; // Serial out = 0

        // End simulation
        $stop;
    end
  initial begin
    $dumpvars;
    $dumpfile("dump.vcd");
  
  end
endmodule

