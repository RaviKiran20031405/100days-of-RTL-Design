
module carry_save_adder (
    input [3:0] a, // First input operand
    input [3:0] b, // Second input operand
    input [3:0] c, // Third input operand
    output [3:0] sum, // Sum output
    output [3:0] carry // Carry output
);
    assign sum = a ^ b ^ c; // XOR of inputs
    assign carry = (a & b) | (b & c) | (c & a); // Majority function

endmodule


////////////////////////////  TB   //////////////////////////


module tb_carry_save_adder;

    reg [3:0] a; // First operand
    reg [3:0] b; // Second operand
    reg [3:0] c; // Third operand
    wire [3:0] sum; // Sum output
    wire [3:0] carry; // Carry output

    // Instantiate the carry_save_adder module
    carry_save_adder uut (
        .a(a),
        .b(b),
        .c(c),
        .sum(sum),
        .carry(carry)
    );

    initial begin
        // Apply test vectors
       $monitor("A = %b, B = %b, C = %b, Sum = %b, Carry = %b", a, b, c, sum, carry);
        a = 4'b0001; b = 4'b0010; c = 4'b0011; #10; // Test case 1
        a = 4'b0101; b = 4'b0110; c = 4'b0111; #10; // Test case 2
        a = 4'b1111; b = 4'b1110; c = 4'b1101; #10; // Test case 3
        $stop; // End the simulation
    end
endmodule
