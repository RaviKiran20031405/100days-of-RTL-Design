module SIPO_Shift_Register (
    input clk,            // Clock signal
    input rst,            // Reset signal (active high)
    input serial_in,      // Serial data input
    output reg [3:0] parallel_out  // 4-bit parallel data output
);

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            parallel_out <= 4'b0000;  // Reset the register to 0
        end else begin
            parallel_out <= {parallel_out[2:0], serial_in}; // Shift and insert serial_in
        end
    end

endmodule


/////////////////////////////////////////   TB   ////////////////////////////////


module tb_SIPO_Shift_Register;

    reg clk;
    reg rst;
    reg serial_in;
    wire [3:0] parallel_out;

    // Instantiate the SIPO shift register
    SIPO_Shift_Register uut (
        .clk(clk),
        .rst(rst),
        .serial_in(serial_in),
        .parallel_out(parallel_out)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        // Initialize signals
        clk = 0;
        rst = 0;
        serial_in = 0;

        // Apply reset
        rst = 1;
        #10;
        rst = 0;

        // Apply serial data input
        serial_in = 1; #10;
        serial_in = 0; #10;
        serial_in = 1; #10;
        serial_in = 1; #10;

        // Wait for some time to observe outputs
        #50;

        // End simulation
        $finish;
    end

    initial begin
        // Monitor the signals
        $monitor("Time = %0t, clk = %b, rst = %b, serial_in = %b, parallel_out = %b", 
                  $time, clk, rst, serial_in, parallel_out);
    end

endmodule
