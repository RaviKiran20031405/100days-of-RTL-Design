module siso_register (
    input wire clk,
    input wire reset,
    input wire serial_in,
    output wire serial_out
);
    reg [3:0] shift_reg;  // 4-bit shift register

    // Sequential block
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            shift_reg <= 4'b0000;  // Reset the shift register to 0
        end else begin
            shift_reg <= {shift_reg[2:0], serial_in};  // Shift left and input new bit
        end
    end

    assign serial_out = shift_reg[3];  // Output the MSB (most significant bit)
endmodule

///////////////////////  TB  ///////////////////////


module tb_siso_register;
    reg clk;
    reg reset;
    reg serial_in;
    wire serial_out;

    // Instantiate the SISO register
    siso_register uut (
        .clk(clk),
        .reset(reset),
        .serial_in(serial_in),
        .serial_out(serial_out)
    );

    // Clock generation
    always #5 clk = ~clk;  // Toggle clock every 5 time units

    // Test sequence
    initial begin
        // Initialize inputs
        clk = 0;
        reset = 0;
        serial_in = 0;

        // Apply reset
        reset = 1;
        #10;
        reset = 0;

        // Apply test data
        serial_in = 1; #10;
        serial_in = 0; #10;
        serial_in = 1; #10;
        serial_in = 1; #10;
        serial_in = 0; #10;
        serial_in = 0; #10;
        serial_in = 1; #10;
        serial_in = 0; #10;

        // End simulation
        #50;
        $finish;
    end

    // Monitor outputs
    initial begin
        $monitor("Time = %0t, reset = %b, serial_in = %b, serial_out = %b, shift_reg = %b", 
                  $time, reset, serial_in, serial_out, uut.shift_reg);
    end

  initial begin
    $dumpvars;
    $dumpfile("dump.vcd");
  end
endmodule
